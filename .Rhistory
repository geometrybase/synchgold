library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_shfe_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
openxl<-diff(log(openx))
open_yl<-diff(log(open_y))
open_zl<-diff(log(open_z))
y <- data.frame(y1=openxl,y2=open_yl,y3=open_zl)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
plot
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 29, type = "const")
spilloverDY12(est, n.ahead = 100, no.corr = F)
sp <- spilloverRollingDY12(y, n.ahead = 100, no.corr = F, "VAR", params_est = params_est, window = 720)
plotOverall(sp)
ccf(y)
ccf
ccf
ccf(openxl, open_yl, lag.max = NULL, type = "covariance",
plot = TRUE, na.action = na.fail, ...)
ccf(openxl, open_yl, lag.max = NULL, type = "covariance",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_yl, lag.max = NULL, type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_zl, lag.max = NULL, type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_yl, lag.max = NULL, type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_yl, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
acf(openxl, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_yl, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_zl, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
openxl<-diff(log(openx))
open_yl<-diff(log(open_y))
open_zl<-diff(log(open_z))
y <- data.frame(y1=openxl,y2=open_yl,y3=open_zl)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
plot
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 29, type = "const")
spilloverDY12(est, n.ahead = 100, no.corr = F)
sp <- spilloverRollingDY12(y, n.ahead = 100, no.corr = F, "VAR", params_est = params_est, window = 720)
plotOverall(sp)
plotFrom(sp)
plotTo(sp)
plotPairwise(sp)
ccf(openx, open_y, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openx, open_z, lag.max = NULL, data=ccf,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openx, open_z, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openx, open_y,open_z, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_yl,open_zl, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openxl, open_zl, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(openyl, open_zl, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(open_yl, open_zl, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
ccf(LBMA_logreturn, AuTD_logreturn, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
plot(AuTD_logreturn)
plot(AuTD_logreturn,line='l')
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
plot(LBMA_logreturn,AuTD_logreturn)
plot(LBMA_logreturn,time)
plot(AuTD_logreturn,xaxis=time)
plot
showMethods("plot")
plot(x=AuTD_logreturn,t=time)
plot(x=AuTD_logreturn,y=time)
size(time)
length(time)
length(AuTD_logreturn)
size(time[2:])
size(time(2:))
size(time(2:end))
size(time(2:length(time)))
size(time[2:length(time)])
length(time[2:length(time)])
plot(x=AuTD_logreturn,y=time)
plot(x=AuTD_logreturn,y=time1)
time1 <-time[2:length(time)]
plot(x=AuTD_logreturn,y=time1)
library(xts)  # 加载需要的包
hh <- xts(AuTD_logreturn, as.Date(time1, format='%Y/%m/%d'))
#  画图
# 指定图的长宽 或者 用命令  plot(hh)  直接画
win.graph(width = 9.5,height = 4.5,pointsize = 8)
plot(hh,type = 'l',main=' ')
library(xts)  # 加载需要的包
hh <- xts(AuTD_logreturn, as.Date(time1, format='%Y/%m/%d %h%m'))
#  画图
# 指定图的长宽 或者 用命令  plot(hh)  直接画
win.graph(width = 9.5,height = 4.5,pointsize = 8)
plot(hh,type = 'l',main=' ')
y <- data.frame(y1=openxl,y2=open_yl,y3=open_zl)
library(xts)  # 加载需要的包
hh <- xts(AuTD_logreturn, as.Date(time1))
#  画图
# 指定图的长宽 或者 用命令  plot(hh)  直接画
win.graph(width = 9.5,height = 4.5,pointsize = 8)
plot(hh,type = 'l',main=' ')
library(xts)  # 加载需要的包
hh <- xts(AuTD_logreturn, as.Date(time1))
#  画图
# 指定图的长宽 或者 用命令  plot(hh)  直接画
plot(hh,type = 'l',main=' ')
plot(AuTD_logreturn,type = 'l',main=' ')
hh
hh <- xts(AuTD_logreturn, as.timeDate(time1))
plot(AuTD_logreturn,type = 'l',main=' ')
plot(hh,type = 'l',main=' ')
hh
time1
hh
write.csv(hh,"test.csv")
plot(x=time1,y=AuTD_logreturn)
install.packages("xtsExtra", repos="http://R-Forge.R-project.org")
plot(hh)
tplot
hh <- xts(AuTD_logreturn, time1)
hh <- xts(AuTD_logreturn, as.Date.timeDate(time1))
hh <- xts(AuTD_logreturn, as.timeDate(time1))
hh <- xts(AuTD_logreturn, as.timeDate(time1))
hh <- xts(AuTD_logreturn, as.TimeDate(time1))
hh <- xts(AuTD_logreturn, as.timeDate(time1))
time1
plot(AuTD_logreturn, index=time1)
plot(AuTD_logreturn, Index=time1)
plot(AuTD_logreturn, Index<-time1)
plot(AuTD_logreturn, Index=time1)
plot(AuTD_logreturn, Index=time1,type='l')
hh <- xts(AuTD_logreturn, as.array(time1))
plot(hh,type = 'l',main=' ')
time1
hh <- xts(AuTD_logreturn, as.character(time1))
plot(hh,type = 'l',main=' ')
hh <- xts(AuTD_logreturn, as.Date.POSIXlt(time1))
plot(hh,type = 'l',main=' ')
install.packages(xts)
install.packages("xts")
install.packages("xts")
hh <- cbind(AuTD_logreturn,time1)
plot(hh,type = 'l',main=' ')
as.timeDate("2018/9/1 13:00")
as.timeSeries("2018/9/1 13:00")
as.Date("2018/9/1 13:00")
as.Date.timeDate("2018/9/1 13:00")
as.timeDate("2018/9/1 13:00")
as.array("2018/9/1 13:00")
hh <- xts(AuTD_logreturn,as.array(time1))
hh <- xts(AuTD_logreturn, as.array(time1))
describe(openx)
describe(open_y)
describe(open_z)
ccf(LBMA_logreturn, AuTD_logreturn, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(Au9999_logreturn, AuTD_logreturn, lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(LBMA_logreturn, AuTD_logreturn, ylab="CCF",lag.max = NULL,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(LBMA_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation",
plot = TRUE, na.action = na.fail)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation",
plot = TRUE, na.action = na.fail)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
time1 <-time[2:length(time)]
describe(openx)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation", plot = TRUE, na.action = na.fail)
y <- data.frame(y1=openxl,y2=open_yl,y3=open_zl)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 29, type = "const")
summary(est)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
time1 <-time[2:length(time)]
describe(openx)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation", plot = TRUE, na.action = na.fail)
y <- data.frame(LBMA_logreturn,Au9999_logreturn,AuTD_logreturn)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 14, type = "const")
summary(est)
irff =irf(est, impulse = NULL, response = NULL, n.ahead = 10,
ortho = TRUE, cumulative = FALSE, boot = TRUE, ci = 0.95,
runs = 100, seed = NULL)
plot(irff)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
time1 <-time[2:length(time)]
describe(openx)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation", plot = TRUE, na.action = na.fail)
y <- data.frame(LBMA_logreturn,Au9999_logreturn,AuTD_logreturn)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 14, type = "const")
irff =irf(est, impulse = NULL, response = NULL, n.ahead = 10,
ortho = TRUE, cumulative = FALSE, boot = TRUE, ci = 0.95,
runs = 100, seed = NULL)
plot(irff)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
time1 <-time[2:length(time)]
describe(openx)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation", plot = TRUE, na.action = na.fail)
y <- data.frame(LBMA_logreturn,Au9999_logreturn,AuTD_logreturn)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 14, type = "const")
#irff =irf(est, impulse = NULL, response = NULL, n.ahead = 10,
#          ortho = TRUE, cumulative = FALSE, boot = TRUE, ci = 0.95,
#          runs = 100, seed = NULL)
#plot(irff)
spilloverDY12(est, n.ahead = 100, no.corr = F)
sp <- spilloverRollingDY12(y, n.ahead = 100, no.corr = F, "VAR", params_est = params_est, window = 810)
save(sp, file = "C:/Users/Raytine/synchgold/lbma999td.rdata")
plotTo(sp)
plotFrom(sp)
library(readr)
library(readxl)
library(lattice)
library(zoo)
library(quadprog)
library(tseries)
library(urca)
library(vars)
library(ccgarch)
library(fGarch)
library(MASS)
library(FinTS)
library(TTR)
library(fUnitRoots)
library(lmtest)
library(np)
library(quantreg)
library(quantreg)
library(psych)
library(frequencyConnectedness)
data(exampleSim)
# Shorten the data, rolling estimation takes quite some time
exampleSim <- exampleSim[1:600,]
pgd <- read_csv("lbma_au9999_datatd.csv")
#openx <-with(pgd,open)
#open_y <- with(pgd,Open)
openx <-with(pgd,Open)
open_y <- with(pgd,Open_x)
open_z <- with(pgd,Open_y)
LBMA_logreturn<-diff(log(openx))
Au9999_logreturn<-diff(log(open_y))
AuTD_logreturn<-diff(log(open_z))
time <- with(pgd,Dates)
time1 <-time[2:length(time)]
describe(openx)
ccf(Au9999_logreturn, AuTD_logreturn, ylab="CCF",lag.max = 20,type = "correlation", plot = TRUE, na.action = na.fail)
y <- data.frame(LBMA_logreturn,Au9999_logreturn,AuTD_logreturn)
#array(NA,c(32487,3))
#dimnames(y ) <- ('y1' 'y2' 'y3')
#y[,1]<-openxl
#y[,2]<-open_yl
#y[,3]<-open_yl
#exampleSim<-cbind(y,open_zl)
est <- VAR(y, p = 14, type = "const")
#irff =irf(est, impulse = NULL, response = NULL, n.ahead = 10,
#          ortho = TRUE, cumulative = FALSE, boot = TRUE, ci = 0.95,
#          runs = 100, seed = NULL)
#plot(irff)
spilloverDY12(est, n.ahead = 100, no.corr = F)
sp <- spilloverRollingDY12(y, n.ahead = 100, no.corr = F, "VAR", params_est = params_est, window = 3600)
save(sp, file = "C:/Users/Raytine/synchgold/lbma999td2.rdata")
plotFrom(sp)
